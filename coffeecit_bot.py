import logging
import json
import os
import re
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = 'id bot'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = 'users.json'
PROMOTIONS_FILE = 'promotions.json'
ADMINS_FILE = 'admins.json'


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()


class AdminStates(StatesGroup):
    add_promotion_title = State()
    add_promotion_desc = State()
    add_discount = State()
    find_user = State()


# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def load_data(filename, default=dict):
    if not os.path.exists(filename):
        return default()
    with open(filename, 'r', encoding='utf-8') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return default()


def save_data(data, filename):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


async def show_main_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    users = load_data(USERS_FILE)
    admins = load_data(ADMINS_FILE)
    user_id = str(message.from_user.id)

    buttons = [
        [KeyboardButton(text="üéÅ –ê–∫—Ü–∏–∏")],
        [KeyboardButton(text="üí≥ –ú–æ—è —Å–∫–∏–¥–∫–∞")]
    ]

    if user_id in users:
        buttons.append([KeyboardButton(text="üìû –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")])
        if user_id in admins:
            buttons.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")])
    else:
        buttons.append([KeyboardButton(text="/start")])

    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    users = load_data(USERS_FILE)

    if user_id not in users:
        await state.set_state(UserStates.waiting_for_name)
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ—Ñ–µ–π–Ω—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("‚òï –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
        await show_main_menu(message)


@dp.message(UserStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(UserStates.waiting_for_phone)
    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True
        )
    )


@dp.message(UserStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else message.text

    if not re.match(r'^\+?\d{10,15}$', phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    data = await state.get_data()
    user_id = str(message.from_user.id)

    users = load_data(USERS_FILE)
    users[user_id] = {
        'name': data['name'],
        'phone': phone,
        'discount': 0,
        'registration_date': message.date.isoformat()
    }
    save_data(users, USERS_FILE)

    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await show_main_menu(message)


# ========== –§–£–ù–ö–¶–ò–û–ù–ê–õ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========
@dp.message(lambda message: message.text == "üéÅ –ê–∫—Ü–∏–∏")
async def show_promotions(message: Message):
    promotions = load_data(PROMOTIONS_FILE)

    if not promotions:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π.")
        return

    response = "üî• –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏:\n\n"
    for promo_id, promo in promotions.items():
        response += f"üéÅ <b>{promo['title']}</b>\n{promo['description']}\n\n"

    await message.answer(response)


@dp.message(lambda message: message.text == "üí≥ –ú–æ—è —Å–∫–∏–¥–∫–∞")
async def show_discount(message: Message):
    user_id = str(message.from_user.id)
    users = load_data(USERS_FILE)

    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    discount = users[user_id].get('discount', 0)
    await message.answer(f"‚úÖ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {discount}%")


@dp.message(lambda message: message.text == "üìû –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    user_id = str(message.from_user.id)
    users = load_data(USERS_FILE)

    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    user = users[user_id]
    response = (
        "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üìå –ò–º—è: {user.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üéÅ –°–∫–∏–¥–∫–∞: {user.get('discount', 0)}%\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    )
    await message.answer(response)


# ========== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==========
@dp.message(lambda message: message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")
async def admin_panel(message: Message):
    user_id = str(message.from_user.id)
    admins = load_data(ADMINS_FILE)

    if user_id not in admins:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é")],
            [KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)


@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é")
async def add_promotion_start(message: Message, state: FSMContext):
    admins = load_data(ADMINS_FILE)
    if str(message.from_user.id) not in admins:
        return

    await state.set_state(AdminStates.add_promotion_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")


@dp.message(AdminStates.add_promotion_title)
async def add_promotion_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AdminStates.add_promotion_desc)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")


@dp.message(AdminStates.add_promotion_desc)
async def add_promotion_desc(message: Message, state: FSMContext):
    data = await state.get_data()

    promotions = load_data(PROMOTIONS_FILE)
    promo_id = str(len(promotions) + 1)
    promotions[promo_id] = {
        'title': data['title'],
        'description': message.text
    }
    save_data(promotions, PROMOTIONS_FILE)

    await message.answer("‚úÖ –ê–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()
    await admin_panel(message)


@dp.message(lambda message: message.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
async def manage_clients(message: Message):
    admins = load_data(ADMINS_FILE)
    if str(message.from_user.id) not in admins:
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")],
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É")],
            [KeyboardButton(text="üéÅ –î–∞—Ç—å —Å–∫–∏–¥–∫—É")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏:", reply_markup=keyboard)


@dp.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def show_clients(message: Message):
    users = load_data(USERS_FILE)

    if not users:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return

    response = "üìã –ö–ª–∏–µ–Ω—Ç—ã:\n\n"
    for user_id, user in users.items():
        response += f"üë§ {user.get('name')} - {user.get('phone')} - –°–∫–∏–¥–∫–∞: {user.get('discount', 0)}%\n"

    await message.answer(response[:4000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã


@dp.message(lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É")
async def find_client_start(message: Message, state: FSMContext):
    await state.set_state(AdminStates.find_user)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@dp.message(AdminStates.find_user)
async def find_client(message: Message, state: FSMContext):
    phone = message.text.strip()
    users = load_data(USERS_FILE)

    found = []
    for user_id, user in users.items():
        if user.get('phone') == phone:
            found.append(user)

    if not found:
        await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
        for user in found:
            response += f"üë§ {user.get('name')} (ID: {user_id})\nüì± {user.get('phone')}\nüéÅ –°–∫–∏–¥–∫–∞: {user.get('discount', 0)}%\n\n"

        await message.answer(response)

    await state.clear()


@dp.message(lambda message: message.text == "üéÅ –î–∞—Ç—å —Å–∫–∏–¥–∫—É")
async def add_discount_start(message: Message, state: FSMContext):
    await state.set_state(AdminStates.add_discount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 10):")


@dp.message(AdminStates.add_discount)
async def add_discount(message: Message, state: FSMContext):
    try:
        user_id, discount = message.text.split()
        discount = int(discount)

        if not 0 <= discount <= 100:
            raise ValueError

        users = load_data(USERS_FILE)
        if user_id not in users:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        users[user_id]['discount'] = discount
        save_data(users, USERS_FILE)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {users[user_id].get('name')} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ {discount}%")

    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123456789 10")

    await state.clear()


@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: Message):
    await show_main_menu(message)


# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for filename in [USERS_FILE, PROMOTIONS_FILE, ADMINS_FILE]:
        if not os.path.exists(filename):
            save_data({}, filename)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    admins = load_data(ADMINS_FILE)
    if not admins:
        admins[str(id tg)] = True  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
        save_data(admins, ADMINS_FILE)

    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
